=================================================
----------------------------
Types of Constructor:->
----------------------------
1. Default or parameterless Constructor.
2. Parameterized Constructor.
3. Copy Constructor.
4. Static Constructor.

Explaination =>
    I) Default or Parameter Less Constructor -->
        -If a Constructor method does't take any parameters then we call that  as default or parameterless Constructor. These constructors can be defined by a programmer explicitly or else will be default implicitly provided there is no explicit constructor under the class.

    class Test
    {
        public Test() // Implicit Constructor
        {

        }
    }

    II) Parameterized Constructor -->
        -If a constructor method is defined with any parameter then we called as a parameterized constructor. These constructor can be defined by programmer only but never can be defined implicitly.

    class Test
    {
        public Test(int a) // Implicit Constructor
        {
            Console.WriteLine("Value of a is:" + a);
        }
        static void Main()
        {
            Test(10);
            Console.ReadLine();
        }
    }

    III) Copy Constructor -->
        -If we want to create multiple instances with  same values then we use copy constructor, in a copy constructor the constructor takes the same class as a parameter to it.

        class CopyConDemo
        {
            int x;
            public CopyConDemo(int i) // Parameterized Constructor
            {
                x=i;
            }
            public CopyConDemo(CopyConDemo obj) // Copy Constructor
            {
                x= obj.x;
            }
            public void Display()
            {
                Console.WriteLine("Value of x is:" + x);
            }
            static void Main()
            {
                CopyConDemo cd1 = new CopyConDemo(10);
                cd1.Display();
                CopyConDemo cd2 = new CopyConDemo(cd1);
                cd2.Display();
                Console.ReadLine();
            }
        }

    IV) Static Constructor -->
        -If a constructor is explicitly declared by using static modifier we call that as Staic Constructor. All the constructors we have defined till now are not-static or instance constructors.

        class Test
        {
            static Test() //Static constructor defined explicitly
            {

            }
            public Test() //Implicit default constructor
            {

            }
        }

        a) If a class constains any static varibles then only implcite static constructor will be present or else we nee to define them explicitly whereas non-static constructor will be implicitly defined in every class (except static class) provied we did not define them explicitly.

        b) Static constructor are responsible in initializing static variables and these constructors are never called explicitly they are implicitly called and more over these constructor arefirst to execute under any class.

        c) Static constructor can't be paramerized so overloading static constructor is not possible.

        class StaticConDemo
        {
            static StaticConDemo()
            {
                Console.WriteLine("Static constructor is executed.")
            }
            static void Main()
            {
                console.WriteLine("main method is executed.");
            }
        }
        OUTPUT => Static constructor is executed.
                  main method is executed.